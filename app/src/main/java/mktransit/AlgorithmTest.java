package mktransit;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class AlgorithmTest {
    public static void main(String[] args) {
        JsonReader reader = new JsonReader();
        reader.loadJsonData();

        Map<String, Station> stationMap = reader.getStationMap();

        PathFinder pathFinder = new PathFinder(stationMap);

        // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏°‡∏≤‡∏à‡∏≤‡∏Å JsonReader
        List<Station> stationList = new ArrayList<>(reader.getStationMap().values());

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á StationUtil
        StationUtil stationUtil = new StationUtil(stationList);

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô IDtoName
        // String stationName = stationUtil.IDtoName("BTS_Siam");

        // System.out.println(stationName); // ‡∏à‡∏∞‡πÑ‡∏î‡πâ "‡∏™‡∏¢‡∏≤‡∏°" (‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡πÉ‡∏ô JSON)


        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô interchange"

        String startId = "CEN";
        String endId = "BL36";

        PathResult result = pathFinder.findShortestPath(startId, endId);
        int i=0;

        if (result.getFullPath().isEmpty()) {
            System.out.println("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å " + stationUtil.IDtoName(startId)+"("+startId+")" + " ‡πÑ‡∏õ‡∏¢‡∏±‡∏á " + stationUtil.IDtoName(endId)+"("+endId+")");
        } else {
            System.out.println("‚úÖ ‡πÄ‡∏à‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á!");
            System.out.println("‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:");

            for (String stationId : result.getFullPath()) {
                Station station = stationMap.get(stationId);
                System.out.println("- " + station.getName() + " (" + station.getId() + ")");
                i++;
            }

            
            // List<String> importantSteps = result.getImportantSteps();
            // for (int i = 0; i < importantSteps.size(); i++) {
            //     String currentId = importantSteps.get(i);
            
            //     // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô IndexOutOfBounds: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å i > 0 ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ i - 1
            //     if (i == importantSteps.size() - 1 && i > 0 && currentId.equals(importantSteps.get(i - 1))) {
            //         continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            //     }
            //     Station station = stationMap.get(currentId);
            //     if (i == 0) {
            //         System.out.print("\nüìç ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Important Steps):\n");
            //         System.out.print(stationUtil.IDtoName(startId)+"("+startId+")" + " -> ");
            //         System.out.print(stationUtil.IDtoName(currentId)+"("+station.getId()+")");
            //     } else {
            //         System.out.print(" -> " + stationUtil.IDtoName(currentId)+"("+station.getId()+")");
            //     }
            // }
            // System.out.println();

            List<String> fullPath = result.getFullPath();

            List<String> importantSteps = PathUtil.filterImportantStepsWithActualTransfers(fullPath, stationMap);

            if (importantSteps.isEmpty()) {
                System.out.print("üìç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "+i+ " ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ");
                System.out.println(stationUtil.IDtoName(startId)+"(" +startId+")"+"‚ûú"+stationUtil.IDtoName(endId) +"("+endId+")");
            } else {
                System.out.println("üìç ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢ | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "+i+" ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ");
                for (String step : importantSteps) {
                    String[] parts = step.split("->");
                    String fromId = parts[0];
                    String toId = parts[1];

                    String fromName = stationUtil.IDtoName(fromId); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô instance
                    String toName = stationUtil.IDtoName(toId);
                    if(fromId.equals(startId)){
                        System.out.print("üîÑ " + fromName+"(" +fromId+")" + " ‚ûú " + toName+"(" +toId+")");
                    }else{
                        System.out.print("üîÑ " + stationUtil.IDtoName(startId)+"(" +startId+")"+" ‚ûú " +fromName +"(" +fromId+")" +" ‚ûú " + toName+"(" +toId+")");
                    }
                    if(!toId.equals(endId)){
                        System.out.print(" ‚ûú " + stationUtil.IDtoName(endId)+"(" +endId+")");
                    }
                    
                }
            }

            


            System.out.println("\nüïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: " + result.getTotalTime() + " ‡∏ô‡∏≤‡∏ó‡∏µ");
        }
    }
}
